{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.Touchable = Touchable;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils = require(\"../../common/utils\");\n\nvar _ThemeContext = require(\"../../ThemeProvider/ThemeContext\"); // @TODO conisder use hooks (onPressIn, onPressOut) for active state instead of underlayColor\n\n\nvar getUnderlayColor = function getUnderlayColor(theme, type, bordered) {\n  if (bordered && type !== 'white') {\n    return theme.orbit.backgroundButtonBorderedActive;\n  }\n\n  return theme.orbit[\"backgroundButton\".concat((0, _utils.capitalize)(type), \"Active\")];\n};\n\nfunction Touchable(_ref) {\n  var accessibilityRole = _ref.accessibilityRole,\n      accessibilityLabel = _ref.accessibilityLabel,\n      bordered = _ref.bordered,\n      children = _ref.children,\n      dataTest = _ref.dataTest,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick,\n      style = _ref.style,\n      type = _ref.type,\n      ref = _ref.ref;\n\n  var _React$useContext = React.useContext(_ThemeContext.ThemeContext),\n      _React$useContext2 = (0, _slicedToArray2[\"default\"])(_React$useContext, 1),\n      theme = _React$useContext2[0];\n\n  return React.createElement(_reactNative.TouchableHighlight, {\n    ref: ref,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    activeOpacity: 1,\n    disabled: disabled,\n    onPress: onClick,\n    style: style,\n    testID: dataTest,\n    underlayColor: getUnderlayColor(theme, type, bordered)\n  }, React.createElement(_reactNative.View, null, children));\n}","map":{"version":3,"sources":["/private/tmp/next/with-react-native-web-app/node_modules/@kiwicom/orbit-react-native/src/Button/Touchable/Touchable.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","exports","value","Touchable","_slicedToArray2","React","_reactNative","_utils","_ThemeContext","getUnderlayColor","theme","type","bordered","orbit","backgroundButtonBorderedActive","concat","capitalize","_ref","accessibilityRole","accessibilityLabel","children","dataTest","disabled","onClick","style","ref","_React$useContext","useContext","ThemeContext","_React$useContext2","createElement","TouchableHighlight","activeOpacity","onPress","testID","underlayColor","View"],"mappings":"AAAA;;;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8CAAD,CAApC;;AAEA,uBAAsBE,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,eAAe,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,sCAAD,CAAR,CAA5C;;AAEA,IAAIM,KAAK,GAAGP,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIO,YAAY,GAAGP,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIQ,MAAM,GAAGR,OAAO,CAAC,oBAAD,CAApB;;AAEA,IAAIS,aAAa,GAAGT,OAAO,CAAC,kCAAD,CAA3B,C,CAEA;;;AACA,IAAIU,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiD;AACtE,MAAIA,QAAQ,IAAID,IAAI,KAAK,OAAzB,EAAkC;AAChC,WAAOD,KAAK,CAACG,KAAN,CAAYC,8BAAnB;AACD;;AAED,SAAOJ,KAAK,CAACG,KAAN,CAAY,mBAAmBE,MAAnB,CAA0B,CAAC,GAAGR,MAAM,CAACS,UAAX,EAAuBL,IAAvB,CAA1B,EAAwD,QAAxD,CAAZ,CAAP;AACD,CAND;;AAQA,SAASR,SAAT,CAAmBc,IAAnB,EAAyB;AACvB,MAAIC,iBAAiB,GAAGD,IAAI,CAACC,iBAA7B;AAAA,MACIC,kBAAkB,GAAGF,IAAI,CAACE,kBAD9B;AAAA,MAEIP,QAAQ,GAAGK,IAAI,CAACL,QAFpB;AAAA,MAGIQ,QAAQ,GAAGH,IAAI,CAACG,QAHpB;AAAA,MAIIC,QAAQ,GAAGJ,IAAI,CAACI,QAJpB;AAAA,MAKIC,QAAQ,GAAGL,IAAI,CAACK,QALpB;AAAA,MAMIC,OAAO,GAAGN,IAAI,CAACM,OANnB;AAAA,MAOIC,KAAK,GAAGP,IAAI,CAACO,KAPjB;AAAA,MAQIb,IAAI,GAAGM,IAAI,CAACN,IARhB;AAAA,MASIc,GAAG,GAAGR,IAAI,CAACQ,GATf;;AAWA,MAAIC,iBAAiB,GAAGrB,KAAK,CAACsB,UAAN,CAAiBnB,aAAa,CAACoB,YAA/B,CAAxB;AAAA,MACIC,kBAAkB,GAAG,CAAC,GAAGzB,eAAe,WAAnB,EAA6BsB,iBAA7B,EAAgD,CAAhD,CADzB;AAAA,MAEIhB,KAAK,GAAGmB,kBAAkB,CAAC,CAAD,CAF9B;;AAIA,SAAOxB,KAAK,CAACyB,aAAN,CAAoBxB,YAAY,CAACyB,kBAAjC,EAAqD;AAC1DN,IAAAA,GAAG,EAAEA,GADqD;AAE1DN,IAAAA,kBAAkB,EAAEA,kBAFsC;AAG1DD,IAAAA,iBAAiB,EAAEA,iBAHuC;AAI1Dc,IAAAA,aAAa,EAAE,CAJ2C;AAK1DV,IAAAA,QAAQ,EAAEA,QALgD;AAM1DW,IAAAA,OAAO,EAAEV,OANiD;AAO1DC,IAAAA,KAAK,EAAEA,KAPmD;AAQ1DU,IAAAA,MAAM,EAAEb,QARkD;AAS1Dc,IAAAA,aAAa,EAAE1B,gBAAgB,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd;AAT2B,GAArD,EAUJP,KAAK,CAACyB,aAAN,CAAoBxB,YAAY,CAAC8B,IAAjC,EAAuC,IAAvC,EAA6ChB,QAA7C,CAVI,CAAP;AAWD","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Touchable = Touchable;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _utils = require(\"../../common/utils\");\n\nvar _ThemeContext = require(\"../../ThemeProvider/ThemeContext\");\n\n// @TODO conisder use hooks (onPressIn, onPressOut) for active state instead of underlayColor\nvar getUnderlayColor = function getUnderlayColor(theme, type, bordered) {\n  if (bordered && type !== 'white') {\n    return theme.orbit.backgroundButtonBorderedActive;\n  }\n\n  return theme.orbit[\"backgroundButton\".concat((0, _utils.capitalize)(type), \"Active\")];\n};\n\nfunction Touchable(_ref) {\n  var accessibilityRole = _ref.accessibilityRole,\n      accessibilityLabel = _ref.accessibilityLabel,\n      bordered = _ref.bordered,\n      children = _ref.children,\n      dataTest = _ref.dataTest,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick,\n      style = _ref.style,\n      type = _ref.type,\n      ref = _ref.ref;\n\n  var _React$useContext = React.useContext(_ThemeContext.ThemeContext),\n      _React$useContext2 = (0, _slicedToArray2.default)(_React$useContext, 1),\n      theme = _React$useContext2[0];\n\n  return React.createElement(_reactNative.TouchableHighlight, {\n    ref: ref,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    activeOpacity: 1,\n    disabled: disabled,\n    onPress: onClick,\n    style: style,\n    testID: dataTest,\n    underlayColor: getUnderlayColor(theme, type, bordered)\n  }, React.createElement(_reactNative.View, null, children));\n}"]},"metadata":{},"sourceType":"script"}