{"ast":null,"code":"\"use strict\";\n\nvar _Date$now = require(\"@babel/runtime-corejs2/core-js/date/now\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.isHoverEnabled = isHoverEnabled;\n/* eslint-disable no-undef */\n\nvar canUseDOM = !!(false && window.document && window.document.createElement);\nvar isEnabled = false;\n\nif (canUseDOM) {\n  var enableHover = function enableHover() {\n    if (isEnabled || _Date$now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n      return;\n    }\n\n    isEnabled = true;\n  };\n\n  var disableHover = function disableHover() {\n    lastTouchTimestamp = _Date$now();\n\n    if (isEnabled) {\n      isEnabled = false;\n    }\n  };\n  /**\n   * Web browsers emulate mouse events (and hover states) after touch events.\n   * This code infers when the currently-in-use modality supports hover\n   * (including for multi-modality devices) and considers \"hover\" to be enabled\n   * if a mouse movement occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch and mouse events on low-powered devices.\n   */\n\n\n  var HOVER_THRESHOLD_MS = 1000;\n  var lastTouchTimestamp = 0;\n  document.addEventListener('touchstart', disableHover, true);\n  document.addEventListener('touchmove', disableHover, true);\n  document.addEventListener('mousemove', enableHover, true);\n}\n\nfunction isHoverEnabled() {\n  return isEnabled;\n}","map":{"version":3,"sources":["/private/tmp/next/with-react-native-web-app/node_modules/@kiwicom/orbit-react-native/src/common/hooks/useHover/hoverState.js"],"names":["exports","value","isHoverEnabled","canUseDOM","window","document","createElement","isEnabled","enableHover","lastTouchTimestamp","HOVER_THRESHOLD_MS","disableHover","addEventListener"],"mappings":"AAAA;;;;;;AAEA,uBAAsBA,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAGAD,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AAEA;;AACA,IAAIC,SAAS,GAAG,CAAC,EAAE,SAAiCC,MAAM,CAACC,QAAxC,IAAoDD,MAAM,CAACC,QAAP,CAAgBC,aAAtE,CAAjB;AACA,IAAIC,SAAS,GAAG,KAAhB;;AAEA,IAAIJ,SAAJ,EAAe;AACb,MAAIK,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,QAAID,SAAS,IAAI,cAAaE,kBAAb,GAAkCC,kBAAnD,EAAuE;AACrE;AACD;;AAEDH,IAAAA,SAAS,GAAG,IAAZ;AACD,GAND;;AAQA,MAAII,YAAY,GAAG,SAASA,YAAT,GAAwB;AACzCF,IAAAA,kBAAkB,GAAG,WAArB;;AAEA,QAAIF,SAAJ,EAAe;AACbA,MAAAA,SAAS,GAAG,KAAZ;AACD;AACF,GAND;AAQA;;;;;;;;;;AAQA,MAAIG,kBAAkB,GAAG,IAAzB;AACA,MAAID,kBAAkB,GAAG,CAAzB;AACAJ,EAAAA,QAAQ,CAACO,gBAAT,CAA0B,YAA1B,EAAwCD,YAAxC,EAAsD,IAAtD;AACAN,EAAAA,QAAQ,CAACO,gBAAT,CAA0B,WAA1B,EAAuCD,YAAvC,EAAqD,IAArD;AACAN,EAAAA,QAAQ,CAACO,gBAAT,CAA0B,WAA1B,EAAuCJ,WAAvC,EAAoD,IAApD;AACD;;AAED,SAASN,cAAT,GAA0B;AACxB,SAAOK,SAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHoverEnabled = isHoverEnabled;\n\n/* eslint-disable no-undef */\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nvar isEnabled = false;\n\nif (canUseDOM) {\n  var enableHover = function enableHover() {\n    if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n      return;\n    }\n\n    isEnabled = true;\n  };\n\n  var disableHover = function disableHover() {\n    lastTouchTimestamp = Date.now();\n\n    if (isEnabled) {\n      isEnabled = false;\n    }\n  };\n\n  /**\n   * Web browsers emulate mouse events (and hover states) after touch events.\n   * This code infers when the currently-in-use modality supports hover\n   * (including for multi-modality devices) and considers \"hover\" to be enabled\n   * if a mouse movement occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch and mouse events on low-powered devices.\n   */\n  var HOVER_THRESHOLD_MS = 1000;\n  var lastTouchTimestamp = 0;\n  document.addEventListener('touchstart', disableHover, true);\n  document.addEventListener('touchmove', disableHover, true);\n  document.addEventListener('mousemove', enableHover, true);\n}\n\nfunction isHoverEnabled() {\n  return isEnabled;\n}"]},"metadata":{},"sourceType":"script"}