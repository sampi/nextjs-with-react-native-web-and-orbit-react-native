"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = Button;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Touchable = require("./Touchable/Touchable");

var _styles = require("../styles");

var _IconContainer = require("./IconContainer/IconContainer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getTypeStyles = function getTypeStyles(type, bordered) {
  return "".concat(type).concat(bordered ? '-bordered' : '');
};

var getTypeTextStyles = function getTypeTextStyles(type, bordered) {
  return "".concat(type, "-text").concat(bordered ? '-bordered' : '');
};

var getPaddingStyles = function getPaddingStyles(size, iconLeft, iconRight, onlyIcon) {
  if (onlyIcon) {
    return "onlyicon-".concat(size);
  }

  if (iconLeft && iconRight) {
    return "icons-".concat(size);
  }

  if (iconLeft && !iconRight) {
    return "iconleft-".concat(size);
  }

  if (!iconLeft && iconRight) {
    return "iconright-".concat(size);
  }

  return "".concat(size);
};

function Button(_ref) {
  var _ref$bordered = _ref.bordered,
      bordered = _ref$bordered === void 0 ? false : _ref$bordered,
      children = _ref.children,
      _ref$circled = _ref.circled,
      circled = _ref$circled === void 0 ? false : _ref$circled,
      dataTest = _ref.dataTest,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      onClick = _ref.onClick,
      role = _ref.role,
      ref = _ref.ref,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'normal' : _ref$size,
      _ref$spaceAfter = _ref.spaceAfter,
      spaceAfter = _ref$spaceAfter === void 0 ? 'none' : _ref$spaceAfter,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'primary' : _ref$type,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 0 : _ref$width,
      iconLeft = _ref.iconLeft,
      iconRight = _ref.iconRight,
      ariaControls = _ref.ariaControls,
      ariaExpanded = _ref.ariaExpanded,
      component = _ref.component,
      _ref$external = _ref.external,
      external = _ref$external === void 0 ? false : _ref$external,
      href = _ref.href,
      submit = _ref.submit,
      tabIndex = _ref.tabIndex;
  var onlyIcon = Boolean(iconLeft && !children);
  var styles = (0, _styles.useStyles)(_objectSpread({
    spaceAfter: spaceAfter,
    base: 'button',
    type: getTypeStyles(type, bordered),
    'button-size': size
  }, fullWidth ? {
    fullWidth: fullWidth
  } : {}, {}, circled ? {
    circled: size
  } : {}, {}, disabled ? {
    disabled: disabled
  } : {}, {
    'button-container': getPaddingStyles(size, iconLeft, iconRight, onlyIcon)
  }));
  var textStyles = (0, _styles.useStyles)({
    base: 'buttonText',
    type: getTypeTextStyles(type, bordered),
    'text-size': size
  });
  var isText = typeof children === 'string';
  var Wrapper = isText ? _reactNative.Text : _reactNative.View;
  var dynamicStyles = width && !fullWidth ? {
    width: width
  } : {};
  return React.createElement(_Touchable.Touchable // Web
  , {
    ariaControls: ariaControls,
    ariaExpanded: ariaExpanded,
    component: component,
    external: external,
    href: href,
    submit: submit,
    tabIndex: tabIndex // Common
    ,
    ref: ref,
    accessibilityLabel: title,
    accessibilityRole: role,
    bordered: bordered,
    dataTest: dataTest,
    disabled: disabled,
    onClick: onClick,
    style: [].concat((0, _toConsumableArray2.default)(styles), [dynamicStyles]),
    title: title,
    type: type
  }, React.createElement(_reactNative.View, {
    style: {
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, iconLeft && React.createElement(_IconContainer.IconContainer, {
    onlyIcon: onlyIcon,
    size: size,
    type: type,
    bordered: bordered,
    icon: iconLeft
  }), React.createElement(Wrapper, {
    style: isText ? textStyles : {}
  }, children), iconRight && React.createElement(_IconContainer.IconContainer, {
    rtl: true,
    onlyIcon: onlyIcon,
    size: size,
    type: type,
    bordered: bordered,
    icon: iconRight
  })));
}

Button.displayName = 'Button';