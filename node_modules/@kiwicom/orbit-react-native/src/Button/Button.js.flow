// @flow

import * as React from 'react';
import { Text, View } from 'react-native';

import { Touchable } from './Touchable/Touchable';
import { useStyles } from '../styles';
import type { ButtonType } from './Button.types';
import { IconContainer } from './IconContainer/IconContainer';

const getTypeStyles = (type, bordered) => `${type}${bordered ? '-bordered' : ''}`;

const getTypeTextStyles = (type, bordered) => `${type}-text${bordered ? '-bordered' : ''}`;

const getPaddingStyles = (
size: string,
iconLeft?: React.Node,
iconRight?: React.Node,
onlyIcon: boolean) =>
{
  if (onlyIcon) {
    return `onlyicon-${size}`;
  }

  if (iconLeft && iconRight) {
    return `icons-${size}`;
  }

  if (iconLeft && !iconRight) {
    return `iconleft-${size}`;
  }

  if (!iconLeft && iconRight) {
    return `iconright-${size}`;
  }

  return `${size}`;
};

export function Button({
  /* TODO
                          * loading = false, // @TODO not ready, need icons been implemented first
                          */

  // Common
  bordered = false,
  children,
  circled = false,
  dataTest,
  disabled = false,
  fullWidth = false,
  onClick,
  role,
  ref,
  size = 'normal',
  spaceAfter = 'none',
  title = '',
  type = 'primary',
  width = 0,
  iconLeft,
  iconRight,

  // Web
  ariaControls,
  ariaExpanded,
  component,
  external = false,
  href,
  submit,
  tabIndex }
: ButtonType) {
  const onlyIcon = Boolean(iconLeft && !children);

  const styles = useStyles({
    spaceAfter,
    base: 'button',
    type: getTypeStyles(type, bordered),
    'button-size': size,
    ...(fullWidth ? { fullWidth } : {}),
    ...(circled ? { circled: size } : {}),
    ...(disabled ? { disabled } : {}),
    'button-container': getPaddingStyles(size, iconLeft, iconRight, onlyIcon) });


  const textStyles = useStyles({
    base: 'buttonText',
    type: getTypeTextStyles(type, bordered),
    'text-size': size });


  const isText = typeof children === 'string';
  const Wrapper = isText ? Text : View;

  const dynamicStyles = width && !fullWidth ? { width } : {};

  return (
    <Touchable
    // Web
    ariaControls={ariaControls}
    ariaExpanded={ariaExpanded}
    component={component}
    external={external}
    href={href}
    submit={submit}
    tabIndex={tabIndex}
    // Common
    ref={ref}
    accessibilityLabel={title}
    accessibilityRole={role}
    bordered={bordered}
    dataTest={dataTest}
    disabled={disabled}
    onClick={onClick}
    style={[...styles, dynamicStyles]}
    title={title}
    type={type}>

      <View style={{ flexDirection: 'row', alignItems: 'center' }}>
        {iconLeft &&
        <IconContainer
        onlyIcon={onlyIcon}
        size={size}
        type={type}
        bordered={bordered}
        icon={iconLeft} />}


        <Wrapper style={isText ? textStyles : {}}>{children}</Wrapper>
        {iconRight &&
        <IconContainer
        rtl
        onlyIcon={onlyIcon}
        size={size}
        type={type}
        bordered={bordered}
        icon={iconRight} />}


      </View>
    </Touchable>);

}

Button.displayName = 'Button';