"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateTextStyles;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var webPlatformStyles = _reactNative.Platform.select({
  web: {
    display: 'flex',
    textDecorationLine: 'none',
    outlineStyle: 'none',
    borderStyle: 'none',
    margin: 0,
    padding: 0
  }
});

function generateTextStyles(theme) {
  return _objectSpread({
    base_button: _objectSpread({
      position: 'relative',
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      height: parseFloat(theme.orbit.heightButtonNormal),
      borderRadius: parseFloat(theme.orbit.borderRadiusNormal),
      backgroundColor: theme.orbit.backgroundButtonPrimary
    }, webPlatformStyles),
    base_buttontext: {
      color: theme.orbit.colorTextButtonPrimary,
      fontFamily: theme.fontFamily[theme.orbit.fontWeightBold],
      fontSize: parseFloat(theme.orbit.fontSizeButtonNormal)
    },
    fontSizeButtonNormal: {
      fontSize: parseFloat(theme.orbit.fontSizeButtonNormal)
    },
    // disabled
    disabled_true: {
      opacity: parseFloat(theme.orbit.opacityButtonDisabled),
      borderWidth: 0
    },
    // size
    'button-size_large': {
      height: parseFloat(theme.orbit.heightButtonLarge)
    },
    'button-size_normal': {
      height: parseFloat(theme.orbit.heightButtonNormal)
    },
    'button-size_small': {
      height: parseFloat(theme.orbit.heightButtonSmall)
    },
    'text-size_large': {
      fontSize: parseFloat(theme.orbit.fontSizeButtonLarge)
    },
    'text-size_small': {
      fontSize: parseFloat(theme.orbit.fontSizeButtonSmall)
    },
    'text-size_normal': {
      fontSize: parseFloat(theme.orbit.fontSizeButtonNormal)
    },
    // circled
    circled_normal: {
      borderRadius: parseFloat(theme.orbit.heightButtonNormal)
    },
    circled_small: {
      borderRadius: parseFloat(theme.orbit.heightButtonSmall)
    },
    circled_large: {
      borderRadius: parseFloat(theme.orbit.heightButtonLarge)
    },
    fullwidth_true: {
      width: '100%'
    }
  }, (0, _utils.generateButtonTypesStyles)('primary', theme), {}, (0, _utils.generateButtonTypesStyles)('secondary', theme), {}, (0, _utils.generateButtonTypesStyles)('info', theme), {}, (0, _utils.generateButtonTypesStyles)('success', theme), {}, (0, _utils.generateButtonTypesStyles)('warning', theme), {}, (0, _utils.generateButtonTypesStyles)('critical', theme), {}, (0, _utils.generateButtonTypesStyles)('google', theme), {}, (0, _utils.generateButtonTypesStyles)('facebook', theme), {}, (0, _utils.generateButtonTypesStyles)('white', theme), {
    // rewrite generated styles for white types
    'type_white-bordered': {
      backgroundColor: theme.orbit.backgroundButtonWhiteBordered
    },
    'hovered_white-bordered-true': {
      backgroundColor: theme.orbit.backgroundButtonWhiteBorderedHover
    },
    // Button styles without icons
    'button-container_small': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonSmall)),
    'button-container_normal': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonNormal)),
    'button-container_large': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonLarge)),
    // Button styles with the left icon
    'button-container_iconleft-small': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonSmallWithLeftIcon)),
    'button-container_iconleft-normal': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonNormalWithLeftIcon)),
    'button-container_iconleft-large': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonLargeWithLeftIcon)),
    // Button styles with the right icon
    'button-container_iconright-small': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonSmallWithRightIcon)),
    'button-container_iconright-normal': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonNormalWithRightIcon)),
    'button-container_iconright-large': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonLargeWithRightIcon)),
    // Button styles with both icons
    'button-container_icons-large': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonLargeWithIcons)),
    'button-container_icons-normal': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonNormalWithIcons)),
    'button-container_icons-small': _objectSpread({}, (0, _utils.mapPaddingTokensToStyles)(theme.orbit.paddingButtonSmallWithIcons)),
    // Button styles with icons and without children
    'button-container_onlyicon-large': {
      width: parseFloat(theme.orbit.heightButtonLarge)
    },
    'button-container_onlyicon-normal': {
      width: parseFloat(theme.orbit.heightButtonNormal)
    },
    'button-container_onlyicon-small': {
      width: parseFloat(theme.orbit.heightButtonSmall)
    }
  });
}