"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconContainer = IconContainer;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ThemeContext = require("../../ThemeProvider/ThemeContext");

var _utils = require("../../common/utils");

var getIconSpacing = function getIconSpacing(_ref) {
  var size = _ref.size,
      theme = _ref.theme,
      onlyIcon = _ref.onlyIcon;
  //  If the Button component is rendered without children return 0.
  if (onlyIcon) return 0;
  var tokens = {
    large: theme.orbit.marginButtonIconLarge,
    normal: theme.orbit.marginButtonIconNormal,
    small: theme.orbit.marginButtonIconSmall
  };
  return parseFloat(tokens[size]);
};

var getIconSize = function getIconSize(size, theme) {
  var tokens = {
    small: theme.orbit.widthIconSmall,
    normal: theme.orbit.widthIconMedium,
    large: theme.orbit.widthIconLarge
  };
  return parseFloat(tokens[size] || tokens.normal);
};

function IconContainer(_ref2) {
  var size = _ref2.size,
      bordered = _ref2.bordered,
      type = _ref2.type,
      icon = _ref2.icon,
      rtl = _ref2.rtl,
      onlyIcon = _ref2.onlyIcon;

  var _React$useContext = React.useContext(_ThemeContext.ThemeContext),
      _React$useContext2 = (0, _slicedToArray2.default)(_React$useContext, 1),
      theme = _React$useContext2[0];

  var iconColor = bordered ? theme.orbit["colorTextButton".concat((0, _utils.capitalize)(type), "Bordered")] : theme.orbit["colorTextButton".concat((0, _utils.capitalize)(type))];
  var iconSize = getIconSize(size, theme);
  var dynamicStyles = (0, _defineProperty2.default)({
    width: iconSize,
    height: iconSize
  }, rtl ? 'marginStart' : 'marginEnd', getIconSpacing({
    size: size,
    theme: theme,
    onlyIcon: onlyIcon
  }));
  return React.createElement(_reactNative.View, {
    style: [styles.container, dynamicStyles]
  }, React.cloneElement(icon, {
    customColor: iconColor,
    size: size === 'normal' ? 'medium' : size
  }));
}

var styles = {
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  }
};