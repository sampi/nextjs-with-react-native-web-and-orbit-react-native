// @flow

import * as React from 'react';
import { View } from 'react-native';

import { ThemeContext } from '../../ThemeProvider/ThemeContext';
import { capitalize } from '../../common/utils';
import type { Size, Type } from '../Button.types';

const getIconSpacing = ({ size, theme, onlyIcon }) => {
  //  If the Button component is rendered without children return 0.
  if (onlyIcon) return 0;
  const tokens = {
    large: theme.orbit.marginButtonIconLarge,
    normal: theme.orbit.marginButtonIconNormal,
    small: theme.orbit.marginButtonIconSmall };

  return parseFloat(tokens[size]);
};

const getIconSize = (size, theme) => {
  const tokens = {
    small: theme.orbit.widthIconSmall,
    normal: theme.orbit.widthIconMedium,
    large: theme.orbit.widthIconLarge };

  return parseFloat(tokens[size] || tokens.normal);
};

type Props = {|
  +size: Size,
  +bordered: boolean,
  +rtl?: boolean,
  +onlyIcon: boolean,
  +icon: React.Element<any>,
  +type: Type, |};


export function IconContainer({ size, bordered, type, icon, rtl, onlyIcon }: Props) {
  const [theme] = React.useContext(ThemeContext);

  const iconColor = bordered ?
  theme.orbit[`colorTextButton${capitalize(type)}Bordered`] :
  theme.orbit[`colorTextButton${capitalize(type)}`];

  const iconSize = getIconSize(size, theme);
  const dynamicStyles = {
    width: iconSize,
    height: iconSize,
    [rtl ? 'marginStart' : 'marginEnd']: getIconSpacing({ size, theme, onlyIcon }) };


  return (
    <View style={[styles.container, dynamicStyles]}>
      {React.cloneElement(icon, {
        customColor: iconColor,
        size: size === 'normal' ? 'medium' : size })}

    </View>);

}

const styles = {
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center' } };