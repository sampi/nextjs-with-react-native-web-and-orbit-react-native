"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Touchable = Touchable;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _utils = require("../../common/utils");

var _ThemeContext = require("../../ThemeProvider/ThemeContext");

// @TODO conisder use hooks (onPressIn, onPressOut) for active state instead of underlayColor
var getUnderlayColor = function getUnderlayColor(theme, type, bordered) {
  if (bordered && type !== 'white') {
    return theme.orbit.backgroundButtonBorderedActive;
  }

  return theme.orbit["backgroundButton".concat((0, _utils.capitalize)(type), "Active")];
};

function Touchable(_ref) {
  var accessibilityRole = _ref.accessibilityRole,
      accessibilityLabel = _ref.accessibilityLabel,
      bordered = _ref.bordered,
      children = _ref.children,
      dataTest = _ref.dataTest,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      style = _ref.style,
      type = _ref.type,
      ref = _ref.ref;

  var _React$useContext = React.useContext(_ThemeContext.ThemeContext),
      _React$useContext2 = (0, _slicedToArray2.default)(_React$useContext, 1),
      theme = _React$useContext2[0];

  return React.createElement(_reactNative.TouchableHighlight, {
    ref: ref,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: accessibilityRole,
    activeOpacity: 1,
    disabled: disabled,
    onPress: onClick,
    style: style,
    testID: dataTest,
    underlayColor: getUnderlayColor(theme, type, bordered)
  }, React.createElement(_reactNative.View, null, children));
}