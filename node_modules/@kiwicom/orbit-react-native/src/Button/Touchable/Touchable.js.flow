// @flow

import * as React from 'react';
import { TouchableHighlight, View } from 'react-native';

import { capitalize } from '../../common/utils';
import { ThemeContext } from '../../ThemeProvider/ThemeContext';
import type { TouchableTypes } from './Touchable.types';

// @TODO conisder use hooks (onPressIn, onPressOut) for active state instead of underlayColor
const getUnderlayColor = (theme, type, bordered) => {
  if (bordered && type !== 'white') {
    return theme.orbit.backgroundButtonBorderedActive;
  }
  return theme.orbit[`backgroundButton${capitalize(type)}Active`];
};

export function Touchable({
  accessibilityRole,
  accessibilityLabel,
  bordered,
  children,
  dataTest,
  disabled,
  onClick,
  style,
  type,
  ref }
: TouchableTypes) {
  const [theme] = React.useContext(ThemeContext);

  return (
    <TouchableHighlight
    ref={ref}
    accessibilityLabel={accessibilityLabel}
    accessibilityRole={accessibilityRole}
    activeOpacity={1}
    disabled={disabled}
    onPress={onClick}
    style={style}
    testID={dataTest}
    underlayColor={getUnderlayColor(theme, type, bordered)}>

      <View>{children}</View>
    </TouchableHighlight>);

}