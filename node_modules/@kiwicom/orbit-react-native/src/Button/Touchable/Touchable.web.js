"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Touchable = Touchable;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNativeWeb = require("react-native-web");

var _hooks = require("../../common/hooks");

var _styles = require("../../styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getHoverStyles = function getHoverStyles(type, hovered, bordered) {
  return "".concat(type).concat(bordered ? '-bordered' : '').concat(hovered ? '-true' : '-false');
};

function Touchable(_ref) {
  var ariaControls = _ref.ariaControls,
      ariaExpanded = _ref.ariaExpanded,
      _ref$submit = _ref.submit,
      submit = _ref$submit === void 0 ? false : _ref$submit,
      tabIndex = _ref.tabIndex,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'button' : _ref$component,
      href = _ref.href,
      external = _ref.external,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityRole = _ref.accessibilityRole,
      bordered = _ref.bordered,
      children = _ref.children,
      dataTest = _ref.dataTest,
      disabled = _ref.disabled,
      ref = _ref.ref,
      onClick = _ref.onClick,
      style = _ref.style,
      type = _ref.type,
      title = _ref.title;

  var _useHover = (0, _hooks.useHover)(),
      isHovered = _useHover.isHovered,
      hoverActions = _useHover.actions;

  var hoverStyles = (0, _styles.useStyles)(_objectSpread({}, isHovered && !disabled ? {
    hovered: getHoverStyles(type, isHovered, bordered)
  } : {}));
  var buttonType = submit ? 'submit' : 'button';
  var isButtonWithHref = component === 'button' && href;

  var Component = function Component(props) {
    return (0, _reactNativeWeb.createElement)(isButtonWithHref ? 'a' : component, props);
  };

  return React.createElement(Component, (0, _extends2.default)({
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-label": accessibilityLabel,
    "data-test": dataTest,
    disabled: disabled,
    href: href,
    onClick: onClick,
    ref: ref,
    rel: !disabled && href && external ? 'noopener noreferrer' : undefined,
    role: accessibilityRole,
    style: [].concat((0, _toConsumableArray2.default)(style), [hoverStyles]),
    tabIndex: tabIndex,
    target: !disabled && href && external ? '_blank' : '',
    type: buttonType,
    title: title
  }, hoverActions), children);
}