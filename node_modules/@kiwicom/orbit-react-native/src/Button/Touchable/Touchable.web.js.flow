// @flow

import * as React from 'react';
import { createElement } from 'react-native-web';

import { useHover } from '../../common/hooks';
import { useStyles } from '../../styles';
import type { TouchableTypes, WebComponentProps } from './Touchable.types';

const getHoverStyles = (type, hovered, bordered) => {
  return `${type}${bordered ? '-bordered' : ''}${hovered ? '-true' : '-false'}`;
};

export function Touchable({
  // Web
  ariaControls,
  ariaExpanded,
  submit = false,
  tabIndex,
  component = 'button',
  href,
  external,

  // Common
  accessibilityLabel,
  accessibilityRole,
  bordered,
  children,
  dataTest,
  disabled,
  ref,
  onClick,
  style,
  type,
  title }
: TouchableTypes) {
  const { isHovered, actions: hoverActions } = useHover();

  const hoverStyles: $FlowFixMe = useStyles({
    ...(isHovered && !disabled ? { hovered: getHoverStyles(type, isHovered, bordered) } : {}) });


  const buttonType = submit ? 'submit' : 'button';

  const isButtonWithHref = component === 'button' && href;

  const Component = (props: WebComponentProps) =>
  createElement(isButtonWithHref ? 'a' : component, props);

  return (
    <Component
    aria-controls={ariaControls}
    aria-expanded={ariaExpanded}
    aria-label={accessibilityLabel}
    data-test={dataTest}
    disabled={disabled}
    href={href}
    onClick={onClick}
    ref={ref}
    rel={!disabled && href && external ? 'noopener noreferrer' : undefined}
    role={accessibilityRole}
    style={[...style, hoverStyles]}
    tabIndex={tabIndex}
    target={!disabled && href && external ? '_blank' : ''}
    type={buttonType}
    title={title}
    {...hoverActions}>

      {children}
    </Component>);

}