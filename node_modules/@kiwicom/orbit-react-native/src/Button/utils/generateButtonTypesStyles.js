"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateButtonTypesStyles = generateButtonTypesStyles;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

var _utils = require("../../common/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* @TODO
 * rewrite to object inline-styles
 */
var platformSpecificStyles = _reactNative.Platform.select({
  web: {
    cursor: 'pointer'
  }
});

function generateButtonTypesStyles(type, theme) {
  var _ref;

  var cType = (0, _utils.capitalize)(type);
  return _ref = {}, (0, _defineProperty2.default)(_ref, "type_".concat(type), {
    backgroundColor: theme.orbit["backgroundButton".concat(cType)]
  }), (0, _defineProperty2.default)(_ref, "type_".concat(type, "-text"), {
    color: theme.orbit["colorTextButton".concat(cType)]
  }), (0, _defineProperty2.default)(_ref, "hovered_".concat(type, "-true"), _objectSpread({
    backgroundColor: theme.orbit["backgroundButton".concat(cType, "Hover")]
  }, platformSpecificStyles)), (0, _defineProperty2.default)(_ref, "type_".concat(type, "-bordered"), {
    backgroundColor: theme.orbit.backgroundButtonBordered,
    borderStyle: 'solid',
    borderWidth: _reactNative.StyleSheet.hairlineWidth,
    borderColor: "".concat(theme.orbit["borderColorButton".concat(cType, "Bordered")])
  }), (0, _defineProperty2.default)(_ref, "type_".concat(type, "-text-bordered"), {
    color: theme.orbit["colorTextButton".concat(cType, "Bordered")]
  }), (0, _defineProperty2.default)(_ref, "hovered_".concat(type, "-bordered-true"), _objectSpread({
    backgroundColor: theme.orbit.backgroundButtonBorderedHover
  }, platformSpecificStyles)), _ref;
}