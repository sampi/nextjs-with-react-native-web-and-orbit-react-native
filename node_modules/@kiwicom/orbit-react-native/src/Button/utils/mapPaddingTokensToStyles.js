"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapPaddingTokensToStyles = mapPaddingTokensToStyles;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function mapPaddingTokensToStyles(paddingToken) {
  var padding = paddingToken.split(' ').map(parseFloat);

  switch (padding.length) {
    case 1:
      padding[3] = padding[2] = padding[1] = padding[0];
      break;

    case 2:
      padding[3] = padding[1];
      padding[2] = padding[0];
      break;

    case 3:
      padding[3] = padding[1];
      break;
  }

  var _padding = (0, _slicedToArray2.default)(padding, 4),
      paddingTop = _padding[0],
      paddingEnd = _padding[1],
      paddingBottom = _padding[2],
      paddingStart = _padding[3];

  return _objectSpread({}, paddingTop ? {
    paddingTop: paddingTop
  } : {}, {}, paddingStart ? {
    paddingStart: paddingStart
  } : {}, {}, paddingBottom ? {
    paddingBottom: paddingBottom
  } : {}, {}, paddingEnd ? {
    paddingEnd: paddingEnd
  } : {});
}