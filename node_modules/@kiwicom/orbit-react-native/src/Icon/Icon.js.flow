// @flow

import React from 'react';
import { Text as RNText, View as RNView } from 'react-native';

import { ThemeContext } from '../ThemeProvider/ThemeContext';
import { useStyles } from '../styles';
import { icons } from './icons.names.generated';
import { testAttribute } from '../common/testUtils';
import type { iconsType } from './icons.types.generated';
import type { IconProps, NamedIconProps } from './Icon.types';

function sanitizeIconCharacter(iconCharacter: string) {
  return String.fromCharCode(parseInt(iconCharacter, 16));
}

export function Icon({
  color = 'currentColor',
  size = 'medium',
  name = '',
  reverseOnRtl,
  customColor,
  dataTest }
: IconProps) {
  const [theme] = React.useContext(ThemeContext);
  const mappedStyles = {
    base: 'icon',
    colorIcon: color,
    widthIcon: size };


  const customStyles = {};
  if (customColor) {
    customStyles.color = customColor;
    delete mappedStyles.colorIcon;
  }

  const styles = useStyles(mappedStyles);

  const transform = [];
  if (reverseOnRtl !== undefined && theme.rtl) {
    transform.push({ scaleX: -1 });
  }
  return (
    <RNView style={{ transform, justifyContent: 'center', alignItems: 'center' }}>
      <RNText style={[styles, customStyles]} {...testAttribute(dataTest)}>
        {sanitizeIconCharacter(icons[name])}
      </RNText>
    </RNView>);

}

// Display name for Storybook
Icon.displayName = 'Icon';

const specificIcons: iconsType = Object.keys(icons).reduce(function (acc, iconName) {
  acc[iconName] = function (props: NamedIconProps) {
    const newProps: IconProps = {
      ...props,
      name: iconName };

    return <Icon {...newProps} />;
  };
  return acc;
}, {});
export { specificIcons as icons };