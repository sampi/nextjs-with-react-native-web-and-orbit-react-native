"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Image = Image;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var getClosestHighQualitySource = function getClosestHighQualitySource(urlSourceSet) {
  var preferredPixelRatio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (!urlSourceSet) {
    console.warn('Missing Image source set'); // @TODO replace with warning from @kiwicom/js

    return null;
  }

  var pixelRatios = Object.keys(urlSourceSet);

  if (!pixelRatios.length) {
    console.warn('Missing Image pixel ratios'); // @TODO replace with warning from @kiwicom/js

    return null;
  }

  pixelRatios.sort(function (ratioA, ratioB) {
    return parseFloat(ratioA) - parseFloat(ratioB);
  });

  for (var ii = 0; ii < pixelRatios.length; ii++) {
    if (parseFloat(pixelRatios[ii]) >= preferredPixelRatio) {
      return urlSourceSet[pixelRatios[ii]];
    }
  }

  var largestPixelRatio = pixelRatios[pixelRatios.length - 1];
  return urlSourceSet[largestPixelRatio];
};

function Image(_ref) {
  var _getClosestHighQualit;

  var source = _ref.source,
      nativeSource = _ref.nativeSource,
      preferredPixelRatio = _ref.preferredPixelRatio,
      alt = _ref.alt,
      dataTest = _ref.dataTest,
      props = (0, _objectWithoutProperties2.default)(_ref, ["source", "nativeSource", "preferredPixelRatio", "alt", "dataTest"]);
  var currentSource = nativeSource ? nativeSource : source;
  var structure;

  switch ((0, _typeof2.default)(currentSource)) {
    case 'string':
      structure = {
        uri: currentSource
      };
      break;

    case 'number':
      structure = currentSource;
      break;

    case 'object':
      structure = {
        uri: (_getClosestHighQualit = getClosestHighQualitySource(currentSource, preferredPixelRatio)) !== null && _getClosestHighQualit !== void 0 ? _getClosestHighQualit : currentSource
      };
      break;
  }

  return React.createElement(_reactNative.Image, (0, _extends2.default)({
    source: structure,
    accessibilityLabel: alt,
    testID: dataTest
  }, props));
}

Image.defaultProps = {
  preferredPixelRatio: _reactNative.PixelRatio.get()
};