// @flow

import * as React from 'react';
import { Image as RNImage, PixelRatio } from 'react-native';

import type { ImageProps, ImageSet } from './Image.types';

const getClosestHighQualitySource = (urlSourceSet: ?ImageSet, preferredPixelRatio?: number = 1) => {
  if (!urlSourceSet) {
    console.warn('Missing Image source set'); // @TODO replace with warning from @kiwicom/js
    return null;
  }
  const pixelRatios = Object.keys(urlSourceSet);
  if (!pixelRatios.length) {
    console.warn('Missing Image pixel ratios'); // @TODO replace with warning from @kiwicom/js
    return null;
  }

  pixelRatios.sort((ratioA, ratioB) => parseFloat(ratioA) - parseFloat(ratioB));

  for (let ii = 0; ii < pixelRatios.length; ii++) {
    if (parseFloat(pixelRatios[ii]) >= preferredPixelRatio) {
      return urlSourceSet[pixelRatios[ii]];
    }
  }

  const largestPixelRatio = pixelRatios[pixelRatios.length - 1];
  return urlSourceSet[largestPixelRatio];
};

export function Image({
  source,
  nativeSource,
  preferredPixelRatio,
  alt,
  dataTest,
  ...props }
: ImageProps) {
  const currentSource = nativeSource ? nativeSource : source;
  let structure;
  switch (typeof currentSource) {
    case 'string':
      structure = { uri: currentSource };
      break;
    case 'number':
      structure = currentSource;
      break;
    case 'object':
      structure = {
        uri: getClosestHighQualitySource(currentSource, preferredPixelRatio) ?? currentSource };

      break;}

  return <RNImage source={structure} accessibilityLabel={alt} testID={dataTest} {...props} />;
}
Image.defaultProps = {
  preferredPixelRatio: PixelRatio.get() };