"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = Text;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _PlatformText = require("./PlatformText");

var _styles = require("../styles");

var _testUtils = require("../common/testUtils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Text(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'primary' : _ref$type,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'normal' : _ref$size,
      _ref$weight = _ref.weight,
      weight = _ref$weight === void 0 ? 'normal' : _ref$weight,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'left' : _ref$align,
      _ref$spaceAfter = _ref.spaceAfter,
      spaceAfter = _ref$spaceAfter === void 0 ? 'none' : _ref$spaceAfter,
      _ref$uppercase = _ref.uppercase,
      uppercase = _ref$uppercase === void 0 ? false : _ref$uppercase,
      _ref$italic = _ref.italic,
      italic = _ref$italic === void 0 ? false : _ref$italic,
      id = _ref.id,
      dataTest = _ref.dataTest,
      children = _ref.children,
      as = _ref.as;
  var styles = (0, _styles.useStyles)({
    margin: 'none',
    base: "text-".concat(weight === 'bold' ? 'bold' : 'normal', "-").concat(italic ? 'italic' : 'normal'),
    colorText: type,
    fontSizeText: size,
    align: align,
    spaceAfter: spaceAfter,
    uppercase: uppercase
  });

  var nextProps = _objectSpread({
    children: children,
    style: styles,
    nativeID: id
  }, (0, _testUtils.testAttribute)(dataTest), {}, _reactNative.Platform.select({
    web: {
      as: as
    }
  }));

  return _react.default.createElement(_PlatformText.PlatformText, nextProps);
} // Display name for Storybook


Text.displayName = 'Text';