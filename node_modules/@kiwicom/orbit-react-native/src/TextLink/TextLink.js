"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextLink = TextLink;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _helpers = require("./helpers");

var _testUtils = require("../common/testUtils");

var _hooks = require("../common/hooks");

var _ThemeContext = require("../ThemeProvider/ThemeContext");

var _TextLinkContainer = require("./TextLinkContainer/TextLinkContainer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TextLinkIcon = function TextLinkIcon(_ref) {
  var icon = _ref.icon,
      color = _ref.color;
  if (!icon) return null;
  return _react.default.cloneElement(icon, {
    customColor: color,
    size: 'small'
  });
};

function TextLink(_ref2) {
  var href = _ref2.href,
      children = _ref2.children,
      size = _ref2.size,
      dataTest = _ref2.dataTest,
      onClick = _ref2.onClick,
      tabIndex = _ref2.tabIndex,
      icon = _ref2.icon,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'primary' : _ref2$type,
      rel = _ref2.rel,
      external = _ref2.external,
      _ref2$asComponent = _ref2.asComponent,
      asComponent = _ref2$asComponent === void 0 ? 'a' : _ref2$asComponent;

  var _React$useContext = _react.default.useContext(_ThemeContext.ThemeContext),
      _React$useContext2 = (0, _slicedToArray2.default)(_React$useContext, 1),
      theme = _React$useContext2[0];

  var _useHover = (0, _hooks.useHover)(),
      isHovered = _useHover.isHovered,
      hoverActions = _useHover.actions;

  var accessibilityRole = !href ? 'button' : 'link';
  var dynamicStyles = {
    color: (0, _helpers.getColor)({
      theme: theme,
      type: type,
      isHovered: isHovered
    })
  };

  var platformSpecificProps = _reactNative.Platform.select(_objectSpread({
    web: {
      rel: rel,
      target: external ? '_blank' : undefined,
      onClick: onClick,
      tabIndex: tabIndex,
      href: href,
      asComponent: asComponent
    }
  }, ['ios', 'android'].reduce(function (acc, native) {
    return _objectSpread({}, acc, {}, (0, _defineProperty2.default)({}, native, {
      accessibilityRole: accessibilityRole,
      onPress: function onPress(e) {
        if (onClick) onClick(e);
        if (href) _reactNative.Linking.openURL(href);
      }
    }));
  }, {})));

  return _react.default.createElement(_TextLinkContainer.TextLinkContainer, (0, _extends2.default)({
    accessibilityRole: accessibilityRole
  }, hoverActions, (0, _testUtils.testAttribute)(dataTest), platformSpecificProps), _react.default.createElement(_reactNative.View, {
    style: styles.wrapper
  }, _react.default.createElement(_reactNative.Text, {
    style: [(0, _helpers.getTextStyles)({
      theme: theme,
      isHovered: isHovered,
      size: size
    }), dynamicStyles]
  }, children), _react.default.createElement(TextLinkIcon, {
    icon: icon,
    color: dynamicStyles.color
  })));
}

var styles = {
  wrapper: {
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
    display: 'flex'
  }
};
TextLink.displayName = 'TextLink';