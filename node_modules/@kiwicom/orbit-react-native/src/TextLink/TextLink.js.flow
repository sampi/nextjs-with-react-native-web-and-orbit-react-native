// @flow

import React from 'react';
import { Linking, Platform, View, Text } from 'react-native';

import { getTextStyles, getColor } from './helpers';
import { testAttribute } from '../common/testUtils';
import { useHover } from '../common/hooks';
import { ThemeContext } from '../ThemeProvider/ThemeContext';
import type { TextLinkType } from './TextLink.types';
import { TextLinkContainer } from './TextLinkContainer/TextLinkContainer';

const TextLinkIcon = ({ icon, color }) => {
  if (!icon) return null;

  return React.cloneElement(icon, {
    customColor: color,
    size: 'small' });

};

export function TextLink({
  href,
  children,
  size,
  dataTest,
  onClick,
  tabIndex,
  icon,
  type = 'primary',

  // WEB only
  rel,
  external,
  asComponent = 'a' }
: TextLinkType) {
  const [theme] = React.useContext(ThemeContext);
  const { isHovered, actions: hoverActions } = useHover();

  const accessibilityRole = !href ? 'button' : 'link';

  const dynamicStyles = {
    color: getColor({ theme, type, isHovered }) };


  const platformSpecificProps = Platform.select({
    web: {
      rel,
      target: external ? '_blank' : undefined,
      onClick: onClick,
      tabIndex,
      href,
      asComponent },

    // @TODO consider extend the Platform module with select "native" option
    ...['ios', 'android'].reduce((acc, native) => {
      return {
        ...acc,
        ...{
          [native]: {
            accessibilityRole,
            onPress: e => {
              if (onClick) onClick(e);
              if (href) Linking.openURL(href);
            } } } };



    }, {}) });


  return (
    <TextLinkContainer
    accessibilityRole={accessibilityRole}
    {...hoverActions}
    {...testAttribute(dataTest)}
    {...platformSpecificProps}>

      <View style={styles.wrapper}>
        <Text style={[getTextStyles({ theme, isHovered, size }), dynamicStyles]}>{children}</Text>
        <TextLinkIcon icon={icon} color={dynamicStyles.color} />
      </View>
    </TextLinkContainer>);

}

const styles = {
  wrapper: {
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
    display: 'flex' } };



TextLink.displayName = 'TextLink';