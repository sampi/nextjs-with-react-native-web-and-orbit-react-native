"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTextStyles = getTextStyles;
exports.getColor = getColor;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

var _helpers = require("../common/styles/helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getTextStyles(_ref) {
  var theme = _ref.theme,
      isHovered = _ref.isHovered,
      size = _ref.size;
  return _objectSpread({
    fontFamily: theme.fontFamily[theme.orbit.fontWeightLinks],
    alignItems: 'center',
    textDecorationLine: isHovered ? 'none' : 'underline'
  }, size ? {
    fontSize: (0, _helpers.getTextSize)(size, theme)
  } : {}, {}, _reactNative.Platform.select({
    web: {
      cursor: 'pointer'
    }
  }));
}

function getColor(_ref2) {
  var theme = _ref2.theme,
      type = _ref2.type,
      _ref2$isHovered = _ref2.isHovered,
      isHovered = _ref2$isHovered === void 0 ? false : _ref2$isHovered;
  var tokens = {
    primary: theme.orbit["colorTextLinkPrimary".concat(isHovered ? 'Hover' : '')],
    secondary: theme.orbit["colorTextLinkSecondary".concat(isHovered ? 'Hover' : '')]
  };
  return tokens[type];
}