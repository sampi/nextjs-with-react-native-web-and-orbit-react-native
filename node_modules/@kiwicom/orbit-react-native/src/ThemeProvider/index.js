"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeProvider = ThemeProvider;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _ThemeContext = require("./ThemeContext");

var _styles = require("../styles");

var _defaultTheme = require("./defaultTheme");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ThemeProvider(_ref) {
  var children = _ref.children,
      theme = _ref.theme;

  var _React$useState = _react.default.useState(_objectSpread({}, _defaultTheme.defaultTheme, {}, theme)),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      appTheme = _React$useState2[0],
      setAppTheme = _React$useState2[1]; // @TODO Handle `dictionary` and pass it on as an available hook
  // @TODO Handle custom themes and variables that come with it
  // (right now, we just hope for the best)
  // @TODO Better handling if memoization of generateStyles should go here


  var styles = _react.default.useMemo(function () {
    return (0, _styles.generateStyles)(appTheme);
  }, [appTheme]);

  return _react.default.createElement(_ThemeContext.ThemeContext.Provider, {
    value: [appTheme, setAppTheme]
  }, _react.default.createElement(_styles.StyleContext.Provider, {
    value: styles
  }, _react.default.Children.only(children)));
}

var _default = ThemeProvider;
exports.default = _default;