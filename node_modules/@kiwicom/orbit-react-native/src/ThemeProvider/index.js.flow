// @flow

import React from 'react';
import type { Node as ReactNode } from 'react';

import { ThemeContext } from './ThemeContext';
import { StyleContext, generateStyles } from '../styles';
import { defaultTheme } from './defaultTheme';
import type { themeType } from './defaultTheme';

type Props = {|
  children?: ReactNode,
  theme?: themeType, |};

export function ThemeProvider({ children, theme }: Props) {
  const [appTheme, setAppTheme] = React.useState({ ...defaultTheme, ...theme });

  // @TODO Handle `dictionary` and pass it on as an available hook

  // @TODO Handle custom themes and variables that come with it
  // (right now, we just hope for the best)

  // @TODO Better handling if memoization of generateStyles should go here
  const styles = React.useMemo(() => generateStyles(appTheme), [appTheme]);

  return (
    <ThemeContext.Provider value={[appTheme, setAppTheme]}>
      <StyleContext.Provider value={styles}>{React.Children.only(children)}</StyleContext.Provider>
    </ThemeContext.Provider>);

}
export default ThemeProvider;