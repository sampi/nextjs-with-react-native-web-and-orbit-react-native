"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tile = Tile;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _hooks = require("../common/hooks");

var _TileHeader = _interopRequireDefault(require("./TileHeader/TileHeader"));

var _Clickable = require("../Clickable");

var _Text = require("../Text");

var _keyMaps = _interopRequireDefault(require("../common/keyMaps"));

var _styles = require("../styles");

var _Expandable = require("../common/Expandable");

var _testUtils = require("../common/testUtils");

function Tile(_ref) {
  var href = _ref.href,
      external = _ref.external,
      icon = _ref.icon,
      title = _ref.title,
      description = _ref.description,
      children = _ref.children,
      onClick = _ref.onClick,
      _ref$initialExpanded = _ref.initialExpanded,
      initialExpanded = _ref$initialExpanded === void 0 ? false : _ref$initialExpanded,
      dataTest = _ref.dataTest;

  var _React$useState = React.useState(initialExpanded),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      isExpanded = _React$useState2[0],
      setIsExpanded = _React$useState2[1];

  var isExpandable = Boolean(!href && children); // Tile is expandable if - not href && children are passed

  var toggleExpandable = function toggleExpandable() {
    if (isExpandable) {
      setIsExpanded(!isExpanded);
    }
  };

  var handleClick = function handleClick(event) {
    toggleExpandable();

    if (onClick) {
      onClick(event);
    }
  };

  var handleKeyPress = function handleKeyPress(ev) {
    if ((Number(ev.keyCode) === _keyMaps.default.ENTER || Number(ev.keyCode) === _keyMaps.default.SPACE) && !href) {
      ev.preventDefault();
      handleClick(ev);
    }
  };

  var _useHover = (0, _hooks.useHover)(),
      isHovered = _useHover.isHovered,
      hoverActions = _useHover.actions;

  var ClickableComponent = href || onClick ? _Clickable.Clickable : _reactNative.View;
  var stylesExpandableWrapper = (0, _styles.useStyles)({
    base: 'expandableWrapper'
  });
  return React.createElement(_reactNative.View, (0, _extends2.default)({
    style: [(0, _styles.useStyles)({
      base: 'tile'
    }), isHovered ? styles.hovered : null]
  }, hoverActions, (0, _testUtils.testAttribute)(dataTest)), React.createElement(ClickableComponent, {
    href: !isExpandable ? href : undefined,
    onClick: React.useCallback(handleClick),
    onKeyPress: React.useCallback(handleKeyPress),
    rel: !isExpandable && external ? 'noopener noreferrer' : undefined,
    role: href ? undefined : 'button',
    target: !isExpandable && external ? '_blank' : undefined,
    tabIndex: 0
  }, React.createElement(_TileHeader.default, {
    icon: icon,
    title: title,
    description: description,
    external: external,
    isExpandable: isExpandable,
    isExpanded: isExpanded
  })), isExpandable && children && React.createElement(_Expandable.Expandable, {
    isExpanded: isExpanded
  }, React.createElement(_reactNative.View, {
    style: stylesExpandableWrapper
  }, typeof children === 'string' ? React.createElement(_Text.Text, null, children) : children)));
}

var styles = {
  hovered: {
    shadowOffset: {
      width: 10,
      height: 6
    }
  }
}; // Display name for Storybook

Tile.displayName = 'Tile';