// @flow

import * as React from 'react';
import { View } from 'react-native';

import { useHover } from '../common/hooks';
import TileHeader from './TileHeader/TileHeader';
import { Clickable } from '../Clickable';
import { Text } from '../Text';
import KEY_CODE_MAP from '../common/keyMaps';
import type { Props } from './Tile.types';
import { useStyles } from '../styles';
import { Expandable } from '../common/Expandable';
import type { onClickEvent } from '../common/common.types';
import { testAttribute } from '../common/testUtils';

export function Tile({
  href,
  external,
  icon,
  title,
  description,
  children,
  onClick,
  initialExpanded = false,
  dataTest }
: Props) {
  const [isExpanded, setIsExpanded] = React.useState<boolean>(initialExpanded);
  const isExpandable = Boolean(!href && children); // Tile is expandable if - not href && children are passed

  const toggleExpandable = () => {
    if (isExpandable) {
      setIsExpanded(!isExpanded);
    }
  };

  const handleClick = (event: onClickEvent) => {
    toggleExpandable();
    if (onClick) {
      onClick(event);
    }
  };

  const handleKeyPress = (ev: SyntheticKeyboardEvent<HTMLElement>) => {
    if (
    (Number(ev.keyCode) === KEY_CODE_MAP.ENTER || Number(ev.keyCode) === KEY_CODE_MAP.SPACE) &&
    !href)
    {
      ev.preventDefault();
      handleClick(ev);
    }
  };
  const { isHovered, actions: hoverActions } = useHover();
  const ClickableComponent = href || onClick ? Clickable : View;
  const stylesExpandableWrapper = useStyles({ base: 'expandableWrapper' });
  return (
    <View
    style={[useStyles({ base: 'tile' }), isHovered ? styles.hovered : null]}
    {...hoverActions}
    {...testAttribute(dataTest)}>

      <ClickableComponent
      href={!isExpandable ? href : undefined}
      onClick={React.useCallback(handleClick)}
      onKeyPress={React.useCallback(handleKeyPress)}
      rel={!isExpandable && external ? 'noopener noreferrer' : undefined}
      role={href ? undefined : 'button'}
      target={!isExpandable && external ? '_blank' : undefined}
      tabIndex={0}>

        <TileHeader
        icon={icon}
        title={title}
        description={description}
        external={external}
        isExpandable={isExpandable}
        isExpanded={isExpanded} />

      </ClickableComponent>

      {isExpandable && children &&
      <Expandable isExpanded={isExpanded}>
          <View style={stylesExpandableWrapper}>
            {typeof children === 'string' ? <Text>{children}</Text> : children}
          </View>
        </Expandable>}

    </View>);

}

const styles = {
  hovered: { shadowOffset: { width: 10, height: 6 } } };


// Display name for Storybook
Tile.displayName = 'Tile';