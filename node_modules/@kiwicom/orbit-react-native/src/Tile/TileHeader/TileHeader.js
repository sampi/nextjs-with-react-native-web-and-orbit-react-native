"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileHeadingWrapper = TileHeadingWrapper;
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Heading = require("../../Heading");

var _Text = require("../../Text");

var _Icon = require("../../Icon");

var _styles = require("../../styles");

var _ThemeContext = _interopRequireDefault(require("../../ThemeProvider/ThemeContext"));

var getIconRight = function getIconRight(_ref) {
  var external = _ref.external,
      isExpandable = _ref.isExpandable,
      isExpanded = _ref.isExpanded;
  var iconName = 'ChevronRight';

  if (isExpandable) {
    if (isExpanded) {
      iconName = 'ChevronUp';
    } else {
      iconName = 'ChevronDown';
    }
  }

  if (external) {
    iconName = 'NewWindow';
  }

  return React.createElement(_Icon.Icon, {
    name: iconName
  });
};

var IconRight = function IconRight(_ref2) {
  var external = _ref2.external,
      isExpandable = _ref2.isExpandable,
      isExpanded = _ref2.isExpanded;

  var _React$useContext = React.useContext(_ThemeContext.default),
      _React$useContext2 = (0, _slicedToArray2.default)(_React$useContext, 1),
      theme = _React$useContext2[0];

  return React.createElement(_reactNative.View, {
    style: (0, _styles.useStyles)({
      base: 'iconRight'
    }),
    isExpandable: isExpandable,
    isExpanded: isExpanded
  }, getIconRight({
    external: external,
    isExpandable: isExpandable,
    theme: theme,
    isExpanded: isExpanded
  }));
};

var TileDescription = function TileDescription(_ref3) {
  var children = _ref3.children,
      icon = _ref3.icon,
      title = _ref3.title;
  return React.createElement(_reactNative.View, {
    style: (0, _styles.useStyles)({
      base: 'description',
      withIcon: !!(icon && title)
    })
  }, React.createElement(_Text.Text, null, children));
};

function TileHeadingWrapper(_ref4) {
  var children = _ref4.children;

  var _React$useContext3 = React.useContext(_ThemeContext.default),
      _React$useContext4 = (0, _slicedToArray2.default)(_React$useContext3, 1),
      theme = _React$useContext4[0];

  return React.createElement(_reactNative.View, {
    style: styles(theme).row
  }, children && React.Children.map(children, function (item) {
    return item ? item : null;
  }));
}

var TileHeader = function TileHeader(_ref5) {
  var icon = _ref5.icon,
      description = _ref5.description,
      external = _ref5.external,
      isExpandable = _ref5.isExpandable,
      isExpanded = _ref5.isExpanded,
      title = _ref5.title;

  var _React$useContext5 = React.useContext(_ThemeContext.default),
      _React$useContext6 = (0, _slicedToArray2.default)(_React$useContext5, 1),
      theme = _React$useContext6[0];

  return React.createElement(_reactNative.View, {
    style: (0, _styles.useStyles)({
      base: 'tileHeader'
    })
  }, React.createElement(TileHeadingWrapper, null, icon && React.createElement(_reactNative.View, {
    style: styles(theme).iconWrapper
  }, icon), title && React.createElement(_Heading.Heading, {
    type: "title3"
  }, title)), description && React.createElement(TileDescription, {
    icon: icon,
    title: title
  }, description), React.createElement(IconRight, {
    external: external,
    isExpandable: isExpandable,
    isExpanded: isExpanded
  }));
};

var styles = function styles(theme) {
  return {
    row: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    iconWrapper: {
      marginEnd: parseFloat(theme.orbit.spaceXSmall),
      justifyContent: 'center'
    }
  };
};

var _default = TileHeader;
exports.default = _default;