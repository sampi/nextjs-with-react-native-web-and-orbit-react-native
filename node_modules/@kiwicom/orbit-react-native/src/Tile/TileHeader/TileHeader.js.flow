// @flow

import * as React from 'react';
import { View } from 'react-native';

import { Heading } from '../../Heading';
import { Text } from '../../Text';
import { Icon } from '../../Icon';
import { useStyles } from '../../styles';
import ThemeContext from '../../ThemeProvider/ThemeContext';
import type { TileHeaderProps, IconRightProps } from '../Tile.types';

const getIconRight = ({ external, isExpandable, isExpanded }) => {
  let iconName = 'ChevronRight';
  if (isExpandable) {
    if (isExpanded) {
      iconName = 'ChevronUp';
    } else {
      iconName = 'ChevronDown';
    }
  }
  if (external) {
    iconName = 'NewWindow';
  }

  return <Icon name={iconName} />;
};

const IconRight = ({ external, isExpandable, isExpanded }: IconRightProps) => {
  const [theme] = React.useContext(ThemeContext);

  return (
    <View
    style={useStyles({ base: 'iconRight' })}
    isExpandable={isExpandable}
    isExpanded={isExpanded}>

      {getIconRight({ external, isExpandable, theme, isExpanded })}
    </View>);

};

const TileDescription = ({
  children,
  icon,
  title }
: {|
  children: React.Node,
  icon?: React$Node,
  title?: string, |}) =>
{
  return (
    <View style={useStyles({ base: 'description', withIcon: !!(icon && title) })}>
      <Text>{children}</Text>
    </View>);

};

type TileHeadingWrapperProps = {| children: any |};

export function TileHeadingWrapper({ children }: TileHeadingWrapperProps) {
  const [theme] = React.useContext(ThemeContext);
  return (
    <View style={styles(theme).row}>
      {children && React.Children.map(children, item => item ? item : null)}
    </View>);

}

const TileHeader = ({
  icon,
  description,
  external,
  isExpandable,
  isExpanded,
  title }
: TileHeaderProps) => {
  const [theme] = React.useContext(ThemeContext);

  return (
    <View style={useStyles({ base: 'tileHeader' })}>
      <TileHeadingWrapper>
        {icon && <View style={styles(theme).iconWrapper}>{icon}</View>}

        {title && <Heading type="title3">{title}</Heading>}
      </TileHeadingWrapper>
      {description &&
      <TileDescription icon={icon} title={title}>
          {description}
        </TileDescription>}

      <IconRight external={external} isExpandable={isExpandable} isExpanded={isExpanded} />
    </View>);

};

const styles = theme => ({
  row: {
    flexDirection: 'row',
    alignItems: 'center' },

  iconWrapper: {
    marginEnd: parseFloat(theme.orbit.spaceXSmall),
    justifyContent: 'center' } });



export default TileHeader;