"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Expandable = Expandable;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _defaultTheme = require("../ThemeProvider/defaultTheme");

function Expandable(_ref) {
  var isExpanded = _ref.isExpanded,
      children = _ref.children;

  var _React$useState = React.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      expandedHeight = _React$useState2[0],
      setExpandedHeight = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      measured = _React$useState4[0],
      setMeasured = _React$useState4[1];

  var _React$useState5 = React.useState(new _reactNative.Animated.Value(0)),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 1),
      animation = _React$useState6[0];

  React.useEffect(function () {
    _reactNative.Animated.timing(animation, {
      toValue: isExpanded ? expandedHeight : 0,
      duration: parseFloat(_defaultTheme.defaultTheme.orbit.durationNormal) * 1000
    }).start();
  });

  var handleHeight = function handleHeight(event) {
    setMeasured(true);
    return expandedHeight ? expandedHeight : setExpandedHeight(event.nativeEvent.layout.height);
  };

  return React.createElement(_reactNative.Animated.View, {
    style: [styles.outerContainer, measured ? {
      height: animation
    } : {
      opacity: 0
    }]
  }, React.createElement(_reactNative.View, {
    onLayout: handleHeight,
    style: styles.innerContainer
  }, children));
}

var styles = {
  outerContainer: {
    overflow: 'hidden',
    position: 'relative'
  },
  innerContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0
  }
};