// @flow

import * as React from 'react';
import { View, Animated } from 'react-native';

import type { OnLayout } from './common.types';
import { defaultTheme } from '../ThemeProvider/defaultTheme';

type Props = {|
  +isExpanded: boolean,
  +children: React$Node, |};


export function Expandable({ isExpanded, children }: Props) {
  const [expandedHeight, setExpandedHeight] = React.useState<?number>(null);

  const [measured, setMeasured] = React.useState<boolean>(false);
  const [animation] = React.useState<Animated.Value>(new Animated.Value(0));

  React.useEffect(() => {
    Animated.timing(animation, {
      toValue: isExpanded ? expandedHeight : 0,
      duration: parseFloat(defaultTheme.orbit.durationNormal) * 1000 }).
    start();
  });

  const handleHeight = (event: OnLayout) => {
    setMeasured(true);
    return expandedHeight ? expandedHeight : setExpandedHeight(event.nativeEvent.layout.height);
  };

  return (
    <Animated.View
    style={[styles.outerContainer, measured ? { height: animation } : { opacity: 0 }]}>

      <View onLayout={handleHeight} style={styles.innerContainer}>
        {children}
      </View>
    </Animated.View>);

}

const styles = {
  outerContainer: {
    overflow: 'hidden',
    position: 'relative' },

  innerContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0 } };