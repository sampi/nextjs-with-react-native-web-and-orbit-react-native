"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHover = useHover;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _hoverState = require("./hoverState");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useHover() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var _useState = (0, _react.useState)({
    isHovered: value,
    showHover: true
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hover = _useState2[0],
      setHover = _useState2[1];

  var onMouseEnter = function onMouseEnter() {
    if ((0, _hoverState.isHoverEnabled)() && !hover.isHovered) {
      setHover(_objectSpread({}, hover, {
        isHovered: true
      }));
    }
  };

  var onMouseLeave = function onMouseLeave() {
    if (hover.isHovered) {
      setHover(_objectSpread({}, hover, {
        isHovered: false
      }));
    }
  };

  return {
    isHovered: hover.isHovered,
    actions: {
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }
  };
}