"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateStyles = generateStyles;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

var componentStyleFns = _interopRequireWildcard(require("./componentStyles"));

function generateStyles(theme) {
  var rules = {}; // Programmatically generate simpler styles,
  // which have a 1:1 token to style rule relationship

  var tokenMappings = {
    colorText: {
      property: 'color',
      types: ['Attention', 'Primary', 'Secondary', 'Info', 'Success', 'Warning', 'Critical', 'White']
    },
    colorIcon: {
      property: 'color',
      types: ['Attention', 'Primary', 'Secondary', 'Info', 'Success', 'Warning', 'Critical', 'White']
    },
    widthIcon: {
      property: 'fontSize',
      types: ['Small', 'Medium', 'Large'],
      transform: parseFloat
    },
    lineHeight: {
      property: 'lineHeight',
      types: ['Text'],
      transform: parseFloat
    }
  };

  function $passThrough(input) {
    return input;
  }

  Object.keys(tokenMappings).forEach(function (tokenPrefix) {
    var _tokenMappings$tokenP = tokenMappings[tokenPrefix],
        property = _tokenMappings$tokenP.property,
        types = _tokenMappings$tokenP.types,
        _tokenMappings$tokenP2 = _tokenMappings$tokenP.transform,
        transform = _tokenMappings$tokenP2 === void 0 ? $passThrough : _tokenMappings$tokenP2;
    types.forEach(function (type) {
      rules["".concat(tokenPrefix, "_").concat(type).toLowerCase()] = (0, _defineProperty2.default)({}, property, transform(theme.orbit[String(tokenPrefix) + String(type)]));
    });
  }); // Manually generate complex styles,
  // or styles that don't have tokens
  // ..........................................................................
  // GENERIC RULES.............................................................
  // ..........................................................................
  // text-align................................................................

  rules.align_left = {
    textAlign: 'left'
  };
  rules.align_right = {
    textAlign: 'right'
  };
  rules.align_center = {
    textAlign: 'center'
  }; // text-transform............................................................

  rules.uppercase_true = {
    textTransform: 'uppercase'
  };
  rules.uppercase_false = {
    textTransform: 'none'
  };
  rules.fontfamily_default = {
    fontFamily: theme.fontFamily[theme.orbit.fontWeightNormal]
  }; // margin....................................................................

  rules.margin_none = {
    margin: 0
  }; // spaceAfter (aka margin-bottom)............................................

  rules.spaceafter_null = {};
  rules.spaceafter_none = {
    marginBottom: 0
  };
  rules.spaceafter_smallest = {
    marginBottom: parseFloat(theme.orbit.spaceXXSmall)
  };
  rules.spaceafter_small = {
    marginBottom: parseFloat(theme.orbit.spaceXSmall)
  };
  rules.spaceafter_normal = {
    marginBottom: parseFloat(theme.orbit.spaceSmall)
  };
  rules.spaceafter_medium = {
    marginBottom: parseFloat(theme.orbit.spaceMedium)
  };
  rules.spaceafter_large = {
    marginBottom: parseFloat(theme.orbit.spaceLarge)
  };
  rules.spaceafter_largest = {
    marginBottom: parseFloat(theme.orbit.spaceXLarge)
  }; // ..........................................................................
  // COMPONENT RULES...........................................................
  // ..........................................................................
  // Load component specific styles ...........................................

  Object.keys(componentStyleFns).forEach(function (componentName) {
    try {
      var componentStyles = componentStyleFns[componentName](theme);
      Object.keys(componentStyles).forEach(function (ruleKey) {
        if (!rules[ruleKey]) {
          rules[ruleKey] = componentStyles[ruleKey];
        } else {
          console.warn("[generateStyles] Style rule collision with '".concat(ruleKey, "' from '").concat(componentName, "'"));
        }
      });
    } catch (e) {
      console.warn("[generateStyles] Failed to import styles from '".concat(componentName, "'"));
      console.warn(e);
    }
  });
  return _reactNative.StyleSheet.create(rules);
}