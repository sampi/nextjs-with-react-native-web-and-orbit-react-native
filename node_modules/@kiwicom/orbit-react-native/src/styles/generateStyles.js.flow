// @flow

import { StyleSheet } from 'react-native';

import * as componentStyleFns from './componentStyles';
import type { themeType } from '../ThemeProvider/defaultTheme';
import type { styleSheetType } from './styleTypes';

export function generateStyles(theme: themeType): styleSheetType {
  const rules = {};
  // Programmatically generate simpler styles,
  // which have a 1:1 token to style rule relationship

  const tokenMappings: {
    [string]: {
      property: string,
      types: Array<string>,
      transform?: (string | number | boolean) => string | number | boolean, ...}, ...} =



  {
    colorText: {
      property: 'color',
      types: [
      'Attention',
      'Primary',
      'Secondary',
      'Info',
      'Success',
      'Warning',
      'Critical',
      'White'] },


    colorIcon: {
      property: 'color',
      types: [
      'Attention',
      'Primary',
      'Secondary',
      'Info',
      'Success',
      'Warning',
      'Critical',
      'White'] },


    widthIcon: {
      property: 'fontSize',
      types: ['Small', 'Medium', 'Large'],
      transform: parseFloat },

    lineHeight: {
      property: 'lineHeight',
      types: ['Text'],
      transform: parseFloat } };



  function $passThrough(input) {
    return input;
  }

  Object.keys(tokenMappings).forEach(function (tokenPrefix) {
    const { property, types, transform = $passThrough } = tokenMappings[tokenPrefix];
    types.forEach(function (type) {
      rules[`${tokenPrefix}_${type}`.toLowerCase()] = {
        [property]: transform(theme.orbit[String(tokenPrefix) + String(type)]) };

    });
  });

  // Manually generate complex styles,
  // or styles that don't have tokens

  // ..........................................................................
  // GENERIC RULES.............................................................
  // ..........................................................................

  // text-align................................................................
  rules.align_left = { textAlign: 'left' };
  rules.align_right = { textAlign: 'right' };
  rules.align_center = { textAlign: 'center' };

  // text-transform............................................................
  rules.uppercase_true = { textTransform: 'uppercase' };
  rules.uppercase_false = { textTransform: 'none' };

  rules.fontfamily_default = {
    fontFamily: theme.fontFamily[theme.orbit.fontWeightNormal] };


  // margin....................................................................
  rules.margin_none = { margin: 0 };

  // spaceAfter (aka margin-bottom)............................................
  rules.spaceafter_null = {};
  rules.spaceafter_none = {
    marginBottom: 0 };

  rules.spaceafter_smallest = {
    marginBottom: parseFloat(theme.orbit.spaceXXSmall) };

  rules.spaceafter_small = {
    marginBottom: parseFloat(theme.orbit.spaceXSmall) };

  rules.spaceafter_normal = {
    marginBottom: parseFloat(theme.orbit.spaceSmall) };

  rules.spaceafter_medium = {
    marginBottom: parseFloat(theme.orbit.spaceMedium) };

  rules.spaceafter_large = {
    marginBottom: parseFloat(theme.orbit.spaceLarge) };

  rules.spaceafter_largest = {
    marginBottom: parseFloat(theme.orbit.spaceXLarge) };


  // ..........................................................................
  // COMPONENT RULES...........................................................
  // ..........................................................................

  // Load component specific styles ...........................................
  Object.keys(componentStyleFns).forEach(function (componentName) {
    try {
      const componentStyles = componentStyleFns[componentName](theme);
      Object.keys(componentStyles).forEach(function (ruleKey) {
        if (!rules[ruleKey]) {
          rules[ruleKey] = componentStyles[ruleKey];
        } else {
          console.warn(
          `[generateStyles] Style rule collision with '${ruleKey}' from '${componentName}'`);

        }
      });
    } catch (e) {
      console.warn(`[generateStyles] Failed to import styles from '${componentName}'`);
      console.warn(e);
    }
  });
  return StyleSheet.create(rules);
}