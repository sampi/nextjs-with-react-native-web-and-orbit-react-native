// @flow

import React from 'react';
import { StyleSheet } from 'react-native';

import { StyleContext } from './StyleContext';
import type { styleRulesType } from './styleTypes';

function tokenToStyleKey(property: string, usageAndType: string | number | boolean = '') {
  return `${property}_${String(usageAndType)}`.toLowerCase();
}

function mapPropsToComponentStyles(props, styles) {
  return Object.keys(props).reduce((acc, prop) => {
    const styleKey = tokenToStyleKey(prop, props[prop]);
    const style = styles[styleKey];
    if (style) {
      acc.push(style);
    } else {
      console.warn(`[useStyles] Style rule not found: '${styleKey}'`);
    }
    return acc;
  }, []);
}

function createCustomStyles(customStyles) {
  return StyleSheet.create({
    customStyles });

}

function getCustomComponentStyles(customStyles) {
  return customStyles ? createCustomStyles(customStyles).customStyles : [];
}

export function useStyles(
props: {
  [string]: string | number | boolean, ...},


customStyles?: {
  [string]: string | number | boolean, ...})


: Array<styleRulesType> {
  const styles = React.useContext(StyleContext);

  return [].concat(
  // Map styles based on props
  mapPropsToComponentStyles(props, styles),
  // Custom styles that won't work with pregenerated rules (eg: customColor)
  getCustomComponentStyles(customStyles));

}